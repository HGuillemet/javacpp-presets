// Targeted by JavaCPP version 1.5.1-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.ngraph;

import org.bytedeco.ngraph.Function;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.ngraph.global.ngraph.*;


    /** Nodes are the backbone of the graph of Value dataflow. Every node has
     *  zero or more nodes as arguments and one value, which is either a tensor
     *  or a (possibly empty) tuple of values. */
    @Namespace("ngraph") @NoOffset @Properties(inherit = org.bytedeco.ngraph.presets.ngraph.class)
public class Node extends Pointer {
        static { Loader.load(); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public Node(Pointer p) { super(p); }
    
        public native void revalidate_and_infer_types();
        // Called after transition
        
        ///
        ///
        public native void delayed_validate_and_infer_types();

        /** \brief Produce a vector of constant nodes (one for each of this node's outputs) that
         *         can replace this node's outputs. May return an empty vector to signal that
         *         conversion to constants is not possible or not supported.
         *  @return If conversion is successful, a vector of op::Constant nodes, corresponding
         *           to this node's outputs in order. If unsuccessful, an empty vector.
         * 
         *  Conversion does not have to be complete. That means that subclasses *may* override
         *  as_constants, but do not have to. It is allowed for as_constants to return an empty
         *  vector even in cases where the output values are statically computable. Thus, any user
         *  of as_constants must allow for the possibility that conversion will fail (i.e.,
         *  as_constants will return {}).
         * 
         *  Conversion must be sound. That means that if as_constants returns a non-empty vector,
         *  the value of each constant in the vector must be exactly the value that would have
         *  been returned for the corresponding output at runtime. */
        public native @ByVal NgraphOpConstantVector as_constants();
        /** \brief Get the string name for the type of the node, such as {@code Add} or {@code Multiply}.
         *         The class name, must not contain spaces as it is used for codegen.
         *  @return A const reference to the node's type name */
        public native @StdString BytePointer description();

        /** \brief Get the unique name of the node.
         *  @return A const reference to the node's unique name. */
        public native @StdString BytePointer get_name();

        /** \brief Sets a friendly name for a node. This does not overwrite the unique name
         *         of the node and is retrieved via get_friendly_name(). Used mainly for debugging.
         *         The friendly name may be set exactly once.
         *  @param name is the friendly name to set */
        public native void set_friendly_name(@StdString BytePointer name);
        public native void set_friendly_name(@StdString String name);

        /** \brief Gets the friendly name for a node. If no friendly name has been set via
         *         set_friendly_name then the node's unique name is returned.
         *  @return A const reference to the node's friendly name. */
        public native @StdString BytePointer get_friendly_name();

        /** Return true if this has the same implementing class as node. This
         *  will be used by the pattern matcher when comparing a pattern
         *  graph against the graph. */
        
        ///
        public native @Cast("bool") boolean is_same_op_type(@Const @SharedPtr @ByRef Node node);

        /** \brief Marks an input as being relevant or irrelevant to the output shapes of this
         *         node.
         *  @param i The index of the input to mark as relevant or irrelevant.
         *  @param relevant true if the input is relevant to output shapes, false otherwise.
         * 
         *  This is used by the shape specialization pass to know which nodes must be statically
         *  evaluated in order to complete shape specialization. (For example, the shape input of
         *  DynReshape must be evaluated statically in order for the output shape to be
         *  determined.) By default, all inputs are marked as shape-irrelevant. Overrides of
         *  validate_and_infer_types should call this function to mark shape-relevant inputs. */
        
        ///
        public native void set_input_is_relevant_to_shape(@Cast("size_t") long i, @Cast("bool") boolean relevant/*=true*/);
        public native void set_input_is_relevant_to_shape(@Cast("size_t") long i);

        /** \brief Marks an input as being relevant or irrelevant to the output values of this
         *         node.
         *  @param i The index of the input to mark as relevant or irrelevant.
         *  @param relevant true if the input is relevant to output values, false otherwise.
         * 
         *  This is used by the shape specialization pass to cut short evaluation in cases where
         *  an input value does not actually have any effect on the output value of the node. (As
         *  of this writing, the only example of this is ShapeOf.) By default, all inputs are
         *  marked as value-relevant. Overrides of validate_and_infer_types should call this
         *  function to mark value-irrelevant inputs. */
        public native void set_input_is_relevant_to_value(@Cast("size_t") long i, @Cast("bool") boolean relevant/*=true*/);
        public native void set_input_is_relevant_to_value(@Cast("size_t") long i);

        public native void set_output_type(@Cast("size_t") long i,
                                     @Const @ByRef Type element_type,
                                     @Const @ByRef PartialShape pshape);

        public native @Cast("bool") boolean is_parameter();
        public native @Cast("bool") boolean is_output();
        public native @Cast("bool") boolean is_constant();
        public native @Cast("bool") boolean is_null();
        public native @Cast("bool") boolean is_op();
        public native @Cast("bool") boolean is_commutative();
        public native @Cast("size_t") long get_instance_id();
        
        public native @Cast("std::ostream*") @ByRef Pointer write_short_description(@Cast("std::ostream*") @ByRef Pointer arg0);
        public native @Cast("std::ostream*") @ByRef Pointer write_long_description(@Cast("std::ostream*") @ByRef Pointer arg0);

        // TODO: Deprecate
        // TODO: Deprecate
        // Deprecated
        // TODO: Remove from unit tests.
        // Deprecated
        // TODO: Remove from unit tests.

        /** Get control dependencies registered on the node */

        public native void add_control_dependency(@SharedPtr @ByVal Node node);

        public native void remove_control_dependency(@SharedPtr @ByVal Node node);

        /** Returns the number of outputs on the for the node. */
        public native @Cast("size_t") long get_output_size();

        /** Returns the element type for output i */
        public native @Const @ByRef Type get_output_element_type(@Cast("size_t") long i);

        /** Checks that there is exactly one output and returns its element type */
        public native @Const @ByRef Type get_element_type();

        /** Returns the shape for output i */
        public native @Const @ByRef Shape get_output_shape(@Cast("size_t") long i);

        /** Returns the partial shape for output i */
        public native @Const @ByRef PartialShape get_output_partial_shape(@Cast("size_t") long i);

        /** Checks that there is exactly one output and returns its shape */
        public native @Const @ByRef Shape get_shape();

        /** Returns the tensor for output i */
        public native @ByRef DescriptorTensor get_output_tensor(@Cast("size_t") long i);

        /** Checks that there is exactly one output and returns its tensor. */
        public native @ByRef DescriptorTensor get_output_tensor();

        /** Returns the tensor of output i */
        public native @SharedPtr @ByVal DescriptorTensor get_output_tensor_ptr(@Cast("size_t") long i);

        /** Checks that there is exactly one output and returns its tensor. */
        public native @SharedPtr @ByVal DescriptorTensor get_output_tensor_ptr();

        /** Returns the set of inputs using output i */

        /** Returns the number of inputs for the op */
        public native @Cast("size_t") long get_input_size();

        /** Returns the element type of input i */
        public native @Const @ByRef Type get_input_element_type(@Cast("size_t") long i);

        /** Returns the shape of input i */
        public native @Const @ByRef Shape get_input_shape(@Cast("size_t") long i);

        /** Returns the partial shape of input i */
        public native @Const @ByRef PartialShape get_input_partial_shape(@Cast("size_t") long i);

        public native @ByVal NodeVector get_arguments();

        public native @SharedPtr @ByVal Node get_argument(@Cast("size_t") long index);

        public native @SharedPtr @ByVal Node copy_with_new_args(@Const @ByRef NodeVector new_args);

        public native @ByVal NgraphFunctionVector get_functions();

        /** True if this and node have one output with same element type and shape */
        

        /** Get device placement */
        public native @Cast("ngraph::Placement") int get_placement();

        /** Set device placement */
        public native void set_placement(@Cast("ngraph::Placement") int placement);

        /** Get device placement */
        public native @Cast("size_t") long get_placement_index();

        /** Set device placement */
        public native void set_placement_index(@Cast("size_t") long placement);
        public native void add_provenance_tag(@StdString BytePointer tag);
        public native void add_provenance_tag(@StdString String tag);
        public native void remove_provenance_tag(@StdString BytePointer tag);
        public native void remove_provenance_tag(@StdString String tag);

        // to be used when nodes are replaced
        public native void merge_provenance_tags_from(@Const @Cast("const ngraph::Node*") @SharedPtr @ByRef Node source);

        /** Get input descriptor that is connected to src */
        public native Input get_input_from(@Const @SharedPtr @ByRef Node src);

        /** Get ouput descriptor that outputs to dst */
        public native Output get_output_to(@Const @SharedPtr @ByRef Node dst);

        /** Get all the nodes that uses the current node */
        public native @ByVal NodeVector get_users(@Cast("bool") boolean check_is_used/*=false*/);
        public native @ByVal NodeVector get_users();

        public native @SharedPtr @ByVal Node get_default_value();
        /** Use instance ids for comparison instead of memory addresses to improve determinism */
        public native @Cast("bool") @Name("operator <") boolean lessThan(@Const @ByRef Node other);
        @MemberGetter public static native @Cast("const size_t") long placement_invalid();
        public static final long placement_invalid = placement_invalid();
    }
