diff -ruN mkl-dnn-1.1/include/dnnl.hpp mkl-dnn-1.1-patch/include/dnnl.hpp
--- mkl-dnn-1.1/include/dnnl.hpp	2019-10-03 10:48:17.000000000 +0900
+++ mkl-dnn-1.1-patch/include/dnnl.hpp	2019-10-06 12:31:52.722868200 +0900
@@ -71,6 +71,8 @@
     static void wrap_c_api(dnnl_status_t status, const char *message) {
         if (status != dnnl_success) throw error(status, message);
     }
+
+    const std::string& toStdString() { return std::string(message).append(": status = ").append(std::to_string(status)); }
 };
 
 /// A class that provides the destructor for an DNNL C handle
diff -ruN mkl-dnn-1.1/src/CMakeLists.txt mkl-dnn-1.1-patch/src/CMakeLists.txt
--- mkl-dnn-1.1/src/CMakeLists.txt	2019-10-03 10:48:17.000000000 +0900
+++ mkl-dnn-1.1-patch/src/CMakeLists.txt	2019-10-06 12:32:11.847277900 +0900
@@ -131,33 +131,6 @@
     -DDIR=${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake
     -P ${PROJECT_SOURCE_DIR}/cmake/gen_mkldnn_compat_cmakes.cmake)")
 
-# MKL-DNN compat libraries
-if (WIN32)
-    add_custom_target(compat_libs ALL
-        ${CMAKE_COMMAND} -E copy
-        $<TARGET_FILE_DIR:${LIB_NAME}>/dnnl.lib
-        $<TARGET_FILE_DIR:${LIB_NAME}>/mkldnn.lib
-        DEPENDS ${LIB_NAME})
-    install(FILES $<TARGET_FILE_DIR:${LIB_NAME}>/mkldnn.lib
-        DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
-else()
-    if(DNNL_LIBRARY_TYPE STREQUAL "SHARED")
-        set_ternary(ext APPLE "dylib" "so")
-        set(vers ".${DNNL_VERSION_MAJOR};.${DNNL_VERSION_MAJOR}.${DNNL_VERSION_MINOR}")
-    else()
-        set(ext "a")
-        set(vers "")
-    endif()
-    foreach(ver "" ${vers})
-        add_custom_target(compat_libs${ver} ALL
-            ${CMAKE_COMMAND} -E remove -f libmkldnn.${ext}${ver} # to make the next command work fine
-            COMMAND ${CMAKE_COMMAND} -E create_symlink libdnnl.${ext}${ver} libmkldnn.${ext}${ver}
-            DEPENDS ${LIB_NAME})
-        install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libmkldnn.${ext}${ver}
-            DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
-    endforeach()
-endif()
-
 # Install custom find modules for transitive dependencies
 if(DNNL_CPU_RUNTIME STREQUAL "TBB")
     if(WIN32)
diff -ruN mkl-dnn-1.1/src/cpu/cpu_engine.cpp mkl-dnn-1.1-patch/src/cpu/cpu_engine.cpp
--- mkl-dnn-1.1/src/cpu/cpu_engine.cpp	2019-10-03 10:48:17.000000000 +0900
+++ mkl-dnn-1.1-patch/src/cpu/cpu_engine.cpp	2019-10-06 12:31:52.722868200 +0900
@@ -78,6 +78,23 @@
 namespace impl {
 namespace cpu {
 
+template struct jit_uni_dw_conv_fwd_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_fwd_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_fwd_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_core, data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx512_common, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_data_kernel<sse41, data_type::f32>;
+
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_core,
+        data_type::bf16>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_common,
+        data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<avx2, data_type::f32>;
+template struct jit_uni_dw_conv_bwd_weights_kernel<sse41, data_type::f32>;
+
 status_t cpu_engine_t::create_memory_storage(
         memory_storage_t **storage, unsigned flags, size_t size, void *handle) {
     return safe_ptr_assign<memory_storage_t>(
diff -ruN mkl-dnn-1.1/src/cpu/jit_uni_dw_conv_kernel_utils.hpp mkl-dnn-1.1-patch/src/cpu/jit_uni_dw_conv_kernel_utils.hpp
--- mkl-dnn-1.1/src/cpu/jit_uni_dw_conv_kernel_utils.hpp	2019-10-03 10:48:17.000000000 +0900
+++ mkl-dnn-1.1-patch/src/cpu/jit_uni_dw_conv_kernel_utils.hpp	2019-10-06 12:31:52.738522800 +0900
@@ -192,11 +192,6 @@
         scratchpad.book(key_conv_padded_bias, sizeof(float) * jcp.oc);
 }
 
-template struct jit_uni_dw_conv_fwd_kernel<avx512_core, data_type::bf16>;
-template struct jit_uni_dw_conv_fwd_kernel<avx512_common, data_type::f32>;
-template struct jit_uni_dw_conv_fwd_kernel<avx2, data_type::f32>;
-template struct jit_uni_dw_conv_fwd_kernel<sse41, data_type::f32>;
-
 template <cpu_isa_t isa, data_type_t kernel_dt>
 struct jit_uni_dw_conv_bwd_data_kernel {
 
@@ -324,11 +319,6 @@
     UNUSED(jcp);
 }
 
-template struct jit_uni_dw_conv_bwd_data_kernel<avx512_core, data_type::bf16>;
-template struct jit_uni_dw_conv_bwd_data_kernel<avx512_common, data_type::f32>;
-template struct jit_uni_dw_conv_bwd_data_kernel<avx2, data_type::f32>;
-template struct jit_uni_dw_conv_bwd_data_kernel<sse41, data_type::f32>;
-
 template <cpu_isa_t isa, data_type_t kernel_dt>
 struct jit_uni_dw_conv_bwd_weights_kernel {
 
@@ -505,12 +495,6 @@
     jcp.nthr = jcp.nthr_g * jcp.nthr_mb;
 }
 
-template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_core,
-        data_type::bf16>;
-template struct jit_uni_dw_conv_bwd_weights_kernel<avx512_common,
-        data_type::f32>;
-template struct jit_uni_dw_conv_bwd_weights_kernel<avx2, data_type::f32>;
-template struct jit_uni_dw_conv_bwd_weights_kernel<sse41, data_type::f32>;
 } // namespace cpu
 } // namespace impl
 } // namespace dnnl
