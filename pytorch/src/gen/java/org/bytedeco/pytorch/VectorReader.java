// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// #ifndef C10_MOBILE
@Namespace("torch::jit") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class VectorReader extends ReadAdapterInterface {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public VectorReader(Pointer p) { super(p); }

  public VectorReader(@Cast("char*") @StdVector BytePointer data) { super((Pointer)null); allocate(data); }
  private native void allocate(@Cast("char*") @StdVector BytePointer data);
  public VectorReader(@Cast("char*") @StdVector ByteBuffer data) { super((Pointer)null); allocate(data); }
  private native void allocate(@Cast("char*") @StdVector ByteBuffer data);
  public VectorReader(@Cast("char*") @StdVector byte[] data) { super((Pointer)null); allocate(data); }
  private native void allocate(@Cast("char*") @StdVector byte[] data);

  public native @Cast("size_t") long size();

  public native @Cast("size_t") long read(@Cast("uint64_t") long pos, Pointer buf, @Cast("size_t") long n, @Cast("const char*") BytePointer what);
  public native @Cast("size_t") long read(@Cast("uint64_t") long pos, Pointer buf, @Cast("size_t") long n, String what);
}
