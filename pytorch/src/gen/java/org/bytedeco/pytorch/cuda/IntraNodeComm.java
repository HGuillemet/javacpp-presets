// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.*;
import org.bytedeco.pytorch.helper.*;
import org.bytedeco.cuda.cudart.*;
import org.bytedeco.cuda.cusparse.*;
import org.bytedeco.cuda.cublas.*;
import org.bytedeco.cuda.cusolver.*;
import org.bytedeco.cuda.cudnn.*;
import org.bytedeco.cuda.nccl.*;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.cuda.functions.*;
import org.bytedeco.pytorch.chrono.*;
import org.bytedeco.pytorch.global.torch.DeviceType;
import org.bytedeco.pytorch.global.torch.ScalarType;
import org.bytedeco.pytorch.global.torch.MemoryFormat;
import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;


@Namespace("c10d::intra_node_comm") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class IntraNodeComm extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public IntraNodeComm(Pointer p) { super(p); }

  public IntraNodeComm(
        Topology topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize,
        @Cast("size_t") long bufferSize/*=c10d::intra_node_comm::kDefaultBufferSize*/) { super((Pointer)null); allocate(topology, p2pStates, buffers, p2pStatesDev, buffersDev, topoInfo, rank, worldSize, bufferSize); }
  @IntrusivePtr @Name("c10::make_intrusive<c10d::intra_node_comm::IntraNodeComm>") private native void allocate(
        Topology topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize,
        @Cast("size_t") long bufferSize/*=c10d::intra_node_comm::kDefaultBufferSize*/);
  public IntraNodeComm(
        Topology topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize) { super((Pointer)null); allocate(topology, p2pStates, buffers, p2pStatesDev, buffersDev, topoInfo, rank, worldSize); }
  @IntrusivePtr @Name("c10::make_intrusive<c10d::intra_node_comm::IntraNodeComm>") private native void allocate(
        Topology topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize);
  public IntraNodeComm(
        @Cast("c10d::intra_node_comm::Topology") int topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize,
        @Cast("size_t") long bufferSize/*=c10d::intra_node_comm::kDefaultBufferSize*/) { super((Pointer)null); allocate(topology, p2pStates, buffers, p2pStatesDev, buffersDev, topoInfo, rank, worldSize, bufferSize); }
  @IntrusivePtr @Name("c10::make_intrusive<c10d::intra_node_comm::IntraNodeComm>") private native void allocate(
        @Cast("c10d::intra_node_comm::Topology") int topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize,
        @Cast("size_t") long bufferSize/*=c10d::intra_node_comm::kDefaultBufferSize*/);
  public IntraNodeComm(
        @Cast("c10d::intra_node_comm::Topology") int topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize) { super((Pointer)null); allocate(topology, p2pStates, buffers, p2pStatesDev, buffersDev, topoInfo, rank, worldSize); }
  @IntrusivePtr @Name("c10::make_intrusive<c10d::intra_node_comm::IntraNodeComm>") private native void allocate(
        @Cast("c10d::intra_node_comm::Topology") int topology,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> p2pStates,
        @ByVal @Cast("std::array<void*,c10d::intra_node_comm::kMaxDevices>*") PointerPointer<Pointer> buffers,
        Pointer p2pStatesDev,
        Pointer buffersDev,
        Pointer topoInfo,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize);

  /**
   * Rendezvous via a c10d::Store.
   * This function may return nullptr if intra-node comm is not applicable.
   * It guarantees all participants either succeeds or abort.
   */
  public static native @IntrusivePtr("c10d::intra_node_comm::IntraNodeComm") @Cast({"", "c10::intrusive_ptr<c10d::intra_node_comm::IntraNodeComm>&"}) IntraNodeComm rendezvous(
        @IntrusivePtr("c10d::Store") @Cast({"", "c10::intrusive_ptr<c10d::Store>&"}) Store store,
        @StdString BytePointer prefix,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize,
        @Cast("size_t") long bufferSize/*=c10d::intra_node_comm::kDefaultBufferSize*/);
  public static native @IntrusivePtr("c10d::intra_node_comm::IntraNodeComm") @Cast({"", "c10::intrusive_ptr<c10d::intra_node_comm::IntraNodeComm>&"}) IntraNodeComm rendezvous(
        @IntrusivePtr("c10d::Store") @Cast({"", "c10::intrusive_ptr<c10d::Store>&"}) Store store,
        @StdString BytePointer prefix,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize);
  public static native @IntrusivePtr("c10d::intra_node_comm::IntraNodeComm") @Cast({"", "c10::intrusive_ptr<c10d::intra_node_comm::IntraNodeComm>&"}) IntraNodeComm rendezvous(
        @IntrusivePtr("c10d::Store") @Cast({"", "c10::intrusive_ptr<c10d::Store>&"}) Store store,
        @StdString String prefix,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize,
        @Cast("size_t") long bufferSize/*=c10d::intra_node_comm::kDefaultBufferSize*/);
  public static native @IntrusivePtr("c10d::intra_node_comm::IntraNodeComm") @Cast({"", "c10::intrusive_ptr<c10d::intra_node_comm::IntraNodeComm>&"}) IntraNodeComm rendezvous(
        @IntrusivePtr("c10d::Store") @Cast({"", "c10::intrusive_ptr<c10d::Store>&"}) Store store,
        @StdString String prefix,
        @Cast("size_t") long rank,
        @Cast("size_t") long worldSize);

  /**
   * Selects a AllReduceAlgo that we think will outperform nccl.
   * Returns AllReduceAlgo::NONE if we don't think we can outperform nccl.
   */
  public native AllReduceAlgo selectAllReduceAlgo(@Const @ByRef Tensor input);

  public native @ByVal Tensor allReduce(@Const @ByRef Tensor input, AllReduceAlgo algo);
  public native @ByVal Tensor allReduce(@Const @ByRef Tensor input, @Cast("c10d::intra_node_comm::AllReduceAlgo") int algo);
}
