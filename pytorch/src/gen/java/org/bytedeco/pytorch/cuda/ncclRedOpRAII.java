// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.*;
import org.bytedeco.cuda.cudart.*;
import org.bytedeco.cuda.cusparse.*;
import org.bytedeco.cuda.cublas.*;
import org.bytedeco.cuda.cusolver.*;
import org.bytedeco.cuda.cudnn.*;
import org.bytedeco.cuda.nccl.*;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.cuda.functions.*;
import org.bytedeco.pytorch.chrono.*;
import org.bytedeco.pytorch.global.torch.DeviceType;
import org.bytedeco.pytorch.global.torch.ScalarType;
import org.bytedeco.pytorch.global.torch.MemoryFormat;
import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;


// Helper that automatically cleans up premul sums.
@Namespace("c10d") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class ncclRedOpRAII extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ncclRedOpRAII(Pointer p) { super(p); }

  public ncclRedOpRAII() { super((Pointer)null); allocate(); }
  private native void allocate();
  public ncclRedOpRAII(@Cast("ncclRedOp_t") int op) { super((Pointer)null); allocate(op); }
  private native void allocate(@Cast("ncclRedOp_t") int op);
  public ncclRedOpRAII(@Cast("ncclRedOp_t") int op, ncclComm comm) { super((Pointer)null); allocate(op, comm); }
  private native void allocate(@Cast("ncclRedOp_t") int op, ncclComm comm);
  
  
  public ncclRedOpRAII(@ByRef(true) ncclRedOpRAII tmp) { super((Pointer)null); allocate(tmp); }
  private native void allocate(@ByRef(true) ncclRedOpRAII tmp);
// #if defined(ENABLE_NCCL_PREMUL_SUM_SUPPORT)
// #endif
  public native @Cast("ncclRedOp_t") @Name("operator ncclRedOp_t") int asInt();
  public native @Cast("ncclRedOp_t") int op_(); public native ncclRedOpRAII op_(int setter);
  public native ncclComm comm_(); public native ncclRedOpRAII comm_(ncclComm setter);
  public native @Cast("bool") boolean premul_sum_(); public native ncclRedOpRAII premul_sum_(boolean setter);
}
