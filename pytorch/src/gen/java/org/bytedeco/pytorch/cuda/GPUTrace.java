// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.cuda;

import org.bytedeco.pytorch.*;
import org.bytedeco.pytorch.Error;
import org.bytedeco.pytorch.global.torch.DeviceType;
import org.bytedeco.pytorch.global.torch.ScalarType;
import org.bytedeco.pytorch.global.torch.MemoryFormat;
import org.bytedeco.pytorch.Allocator;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.pytorch.global.torch_cuda.*;


@Namespace("c10::impl") @Properties(inherit = org.bytedeco.pytorch.presets.torch_cuda.class)
public class GPUTrace extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public GPUTrace() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public GPUTrace(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GPUTrace(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public GPUTrace position(long position) {
        return (GPUTrace)super.position(position);
    }
    @Override public GPUTrace getPointer(long i) {
        return new GPUTrace((Pointer)this).offsetAddress(i);
    }

  // On the x86 architecture the atomic operations are lock-less.
  

  // When PyTorch migrates to C++20, this should be changed to an atomic flag.
  // Currently, the access to this variable is not synchronized, on the basis
  // that it will only be flipped once and by the first interpreter that
  // accesses it.
  public static native @Cast("bool") boolean haveState(); public static native void haveState(boolean setter);

  // This function will only register the first interpreter that tries to invoke
  // it. For all of the next ones it will be a no-op.
  public static native void set_trace(@Const PyInterpreter arg0);

  public static native @Const PyInterpreter get_trace();
}
