// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.chrono.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.pytorch.helper.*;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::distributed::rpc") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class SerializedPyObj extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public SerializedPyObj(Pointer p) { super(p); }

    public SerializedPyObj(BytePointer payload, TensorVector tensors) { super((Pointer)null); allocate(payload, tensors); }
    private native void allocate(@Cast({"","std::string&&"}) @StdString BytePointer payload, @ByRef(true) TensorVector tensors);
    public SerializedPyObj(String payload, TensorVector tensors) { super((Pointer)null); allocate(payload, tensors); }
    private native void allocate(@Cast({"","std::string&&"}) @StdString String payload, @ByRef(true) TensorVector tensors);

  
  public static native @ByVal SerializedPyObj fromIValues(@StdVector IValue value);

  public native @StdString BytePointer payload_(); public native SerializedPyObj payload_(BytePointer setter);
  public native @ByRef TensorVector tensors_(); public native SerializedPyObj tensors_(TensorVector setter);
}
