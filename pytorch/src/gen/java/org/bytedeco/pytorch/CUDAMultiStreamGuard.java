// Targeted by JavaCPP version 1.5.9-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


/** A variant of MultiStreamGuard that is specialized for CUDA. */
@Namespace("c10::cuda") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class CUDAMultiStreamGuard extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public CUDAMultiStreamGuard(Pointer p) { super(p); }

  public CUDAMultiStreamGuard(@ByVal CUDAStreamArrayRef streams) { super((Pointer)null); allocate(streams); }
  private native void allocate(@ByVal CUDAStreamArrayRef streams);

  /** Copy is disallowed */
  
  

  // See Note [Move construction for RAII guards is tricky]
  

  // See Note [Move assignment for RAII guards is tricky]
  
}
