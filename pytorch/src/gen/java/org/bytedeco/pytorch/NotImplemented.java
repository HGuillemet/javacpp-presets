// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.chrono.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.pytorch.presets.torch.IntrusivePtr;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// We print grad_fn names in tensor printing. For functions with backward
// NYI, grad_fn=<Error> will be printed if we use Error, which is confusing. So
// special case with a new NotImplemented function here.
@Namespace("torch::autograd") @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class NotImplemented extends AutogradError {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public NotImplemented(Pointer p) { super(p); }

  public NotImplemented(@StdString BytePointer forward_fn, @ByRef(true) EdgeVector next_edges) { super((Pointer)null); allocate(forward_fn, next_edges); }
  private native void allocate(@StdString BytePointer forward_fn, @ByRef(true) EdgeVector next_edges);
  public NotImplemented(@StdString String forward_fn, @ByRef(true) EdgeVector next_edges) { super((Pointer)null); allocate(forward_fn, next_edges); }
  private native void allocate(@StdString String forward_fn, @ByRef(true) EdgeVector next_edges);

  public NotImplemented(@StdString BytePointer forward_fn) { super((Pointer)null); allocate(forward_fn); }
  private native void allocate(@StdString BytePointer forward_fn);
  public NotImplemented(@StdString String forward_fn) { super((Pointer)null); allocate(forward_fn); }
  private native void allocate(@StdString String forward_fn);
}
