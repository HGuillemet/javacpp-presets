// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.chrono.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.pytorch.presets.torch.IntrusivePtr;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// Struct for options to configure the RPC Retry protocol.
@Namespace("torch::distributed::rpc") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class RpcRetryOptions extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public RpcRetryOptions(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public RpcRetryOptions(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public RpcRetryOptions position(long position) {
        return (RpcRetryOptions)super.position(position);
    }
    @Override public RpcRetryOptions getPointer(long i) {
        return new RpcRetryOptions((Pointer)this).offsetAddress(i);
    }

  // Using a default constructor like all other Options structs in the RPC
  // codebase. TORCH_CHECKs for input validation are done in the
  // sendWithRetries function.
  public RpcRetryOptions() { super((Pointer)null); allocate(); }
  private native void allocate();
  // Maximum number of times we will retry the RPC
  public native int maxRetries(); public native RpcRetryOptions maxRetries(int setter);
  // Initial duration between consecutive RPC send attempts
  public native @ByRef Milliseconds rpcRetryDuration(); public native RpcRetryOptions rpcRetryDuration(Milliseconds setter);
  // Constant for exponential backoff used while calculating future wait
  // durations
  public native float retryBackoff(); public native RpcRetryOptions retryBackoff(float setter);
}
