// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.chrono.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.pytorch.helper.*;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


// This structure represents autograd metadata that we need to pass across
// different nodes when we call an RPC which needs autograd computation.
@Namespace("torch::distributed::autograd") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class AutogradMetadata extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public AutogradMetadata(Pointer p) { super(p); }

  public AutogradMetadata(@Cast("int64_t") long autogradContextId, @Cast("int64_t") long autogradMessageId) { super((Pointer)null); allocate(autogradContextId, autogradMessageId); }
  private native void allocate(@Cast("int64_t") long autogradContextId, @Cast("int64_t") long autogradMessageId);

  // autogradContextId_ is a globally unique integer that identifies a
  // particular distributed autograd pass.
  public native @Cast("int64_t") long autogradContextId(); public native AutogradMetadata autogradContextId(long setter);
  // autogradMessageId_ is a globally unique integer that identifies a pair
  // of send/recv autograd functions.
  public native @Cast("int64_t") long autogradMessageId(); public native AutogradMetadata autogradMessageId(long setter);
}
