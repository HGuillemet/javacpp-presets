// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.gloo;

import org.bytedeco.pytorch.chrono.*;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.gloo.*;


@Name("gloo::ReductionFunction<int>") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.gloo.class)
public class ReductionFunctionInt extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ReductionFunctionInt(Pointer p) { super(p); }

  public static class Function extends FunctionPointer {
      static { Loader.load(); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public    Function(Pointer p) { super(p); }
      protected Function() { allocate(); }
      private native void allocate();
      public native void call(IntPointer arg0, @Const IntPointer arg1, @Cast("size_t") long n);
  }

  
  
  
  

  public ReductionFunctionInt(@Cast("gloo::ReductionType") int type, Function fn) { super((Pointer)null); allocate(type, fn); }
  private native void allocate(@Cast("gloo::ReductionType") int type, Function fn);

  public native @Cast("gloo::ReductionType") int type();

  public native void call(IntPointer x, @Const IntPointer y, @Cast("size_t") long n);
  public native void call(IntBuffer x, @Const IntBuffer y, @Cast("size_t") long n);
  public native void call(int[] x, @Const int[] y, @Cast("size_t") long n);
}
