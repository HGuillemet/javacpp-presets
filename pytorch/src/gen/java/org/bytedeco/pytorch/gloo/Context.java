// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch.gloo;

import org.bytedeco.pytorch.chrono.*;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;
import org.bytedeco.pytorch.*;
import static org.bytedeco.pytorch.global.torch.*;

import static org.bytedeco.pytorch.global.gloo.*;


@Namespace("gloo") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.gloo.class)
public class Context extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public Context(Pointer p) { super(p); }

  public Context(int rank, int size, int base/*=2*/) { super((Pointer)null); allocate(rank, size, base); }
  @SharedPtr @Name("std::make_shared<gloo::Context>") private native void allocate(int rank, int size, int base/*=2*/);
  public Context(int rank, int size) { super((Pointer)null); allocate(rank, size); }
  @SharedPtr @Name("std::make_shared<gloo::Context>") private native void allocate(int rank, int size);

  @MemberGetter public native int rank();
  @MemberGetter public native int size();
  public native int base(); public native Context base(int setter);

  public native @SharedPtr("gloo::transport::Device") @ByRef Device getDevice();

  public native @UniquePtr Pair getPair(int i);

  // Factory function to create an unbound buffer for use with the
  // transport used for this context. Use this function to avoid tying
  // downstream code to a specific transport.
  public native @UniquePtr UnboundBuffer createUnboundBuffer(
        Pointer ptr, @Cast("size_t") long size);

  public native int nextSlot(int numToSkip/*=1*/);
  public native int nextSlot();

  public native void closeConnections();

  public native void setTimeout(@ByVal Milliseconds timeout);

  public native @ByVal Milliseconds getTimeout();
}
