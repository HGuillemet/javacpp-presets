// Targeted by JavaCPP version 1.5.11-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.pytorch;

import org.bytedeco.pytorch.Allocator;
import org.bytedeco.pytorch.Function;
import org.bytedeco.pytorch.functions.*;
import org.bytedeco.pytorch.chrono.*;
import org.bytedeco.pytorch.Module;
import org.bytedeco.javacpp.annotation.Cast;
import org.bytedeco.pytorch.presets.torch.IntrusivePtr;
import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;
import static org.bytedeco.openblas.global.openblas_nolapack.*;
import static org.bytedeco.openblas.global.openblas.*;

import static org.bytedeco.pytorch.global.torch.*;


@Namespace("torch::distributed::rpc") @NoOffset @Properties(inherit = org.bytedeco.pytorch.presets.torch.class)
public class GloballyUniqueId extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public GloballyUniqueId(Pointer p) { super(p); }

  public GloballyUniqueId(short createdOn, long localId) { super((Pointer)null); allocate(createdOn, localId); }
  private native void allocate(short createdOn, long localId);
  public GloballyUniqueId(@Const @ByRef GloballyUniqueId other) { super((Pointer)null); allocate(other); }
  private native void allocate(@Const @ByRef GloballyUniqueId other);
  

  public native @Cast("bool") @Name("operator ==") boolean equals(@Const @ByRef GloballyUniqueId other);
  public native @Cast("bool") @Name("operator !=") boolean notEquals(@Const @ByRef GloballyUniqueId other);

  public native @ByVal IValue toIValue();
  public static native @ByVal GloballyUniqueId fromIValue(@Const @ByRef IValue arg0);

  public static class Hash extends Pointer {
      static { Loader.load(); }
      /** Default native constructor. */
      public Hash() { super((Pointer)null); allocate(); }
      /** Native array allocator. Access with {@link Pointer#position(long)}. */
      public Hash(long size) { super((Pointer)null); allocateArray(size); }
      /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
      public Hash(Pointer p) { super(p); }
      private native void allocate();
      private native void allocateArray(long size);
      @Override public Hash position(long position) {
          return (Hash)super.position(position);
      }
      @Override public Hash getPointer(long i) {
          return new Hash((Pointer)this).offsetAddress(i);
      }
  
    public native @Cast("size_t") @Name("operator ()") long apply(@Const @ByRef GloballyUniqueId key);
  }

  @MemberGetter public static native int kLocalIdBits();
  public static final int kLocalIdBits = kLocalIdBits();

  @MemberGetter public native short createdOn_();
  @MemberGetter public native long localId_();
}
